/*
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/*
 * MultiInstanceToMIDensity.java
 * Copyright (C) 2006 University of Waikato, Hamilton, New Zealand
 *
 */

package weka.filters.unsupervised.attribute;

import java.util.Enumeration;
import java.util.Vector;

import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.FastVector;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Option;
import weka.core.OptionHandler;
import weka.core.RevisionUtils;
import weka.core.StringLocator;
//import weka.core.Tag;
import weka.core.Utils;
import weka.core.Capabilities.Capability;
import weka.core.Debug.DBO;
import weka.estimators.MultiBin;
import weka.estimators.MultiBinningEstimator;
import weka.estimators.MultiBinningUtils;
import weka.estimators.MultiEstimator;
import weka.estimators.MultiBinningUtils.Tree;
import weka.filters.Filter;
import weka.filters.UnsupervisedFilter;

/** 
 * Converts the multi-instance dataset (with relational-valued attribute) into
 * single instance dataset so that the Nominalize, Standardize and other type
 * of filters or transformation can be applied to these data before the further
 * processing. <p/>
 * 
 * Note the first attribute of the converted dataset is a nominal attribute
 * refers to the bagId.  <p/>
 *
 * Valid options are: <p/>
 * 
 * -A 0|1|2|3 <br/>
 *  four different methods of setting the weight of each propositional instance:
 *  (default method: 0) <br/>
 *  0. weight = original single bag weight /Total number of propositional instance
 *  in the corresponding bag; <br/>
 *  1. weight = 1.0 <br/>
 *  2. weight = 1.0/Total number of propositional instance in the corresponding bag
 *  <br/>
 *  3. weight = Total number of propositional instance / (Total number of bags *
 *  Total number of propositional instance in the corresponding bag) <br/>
 *
 * @author Lin Dong (ld21@cs.waikato.ac.nz) 
 * @version $Revision: 1.1 $
 * @see PropositionalToMultiInstance
 */
public class MultiInstanceToMIDensity 
  extends Filter 
  implements OptionHandler, UnsupervisedFilter {

  /**
	 * 
	 */
	private static final long serialVersionUID = -8379941263447452163L;

/** additional output element (for verbose modes) */
  DBO dbo = new DBO();
  
  /** The multidimensional binning estimator estimators. */
  protected MultiEstimator m_estimator = new weka.estimators.MultiTUBE();
  
  /** Filter used to convert MI dataset into single-instance dataset */
  protected MultiInstanceToPropositional m_convertToProp = new MultiInstanceToPropositional();

  /** the bins for the density */
  protected Vector m_bins;
  
  /** the root of the divison tree */
  protected Tree m_root;
  
  /** the format of the data set when transformed to propositional */
  protected Instances m_propositionalFormat = null;
  
  /** num of bags */
  protected int m_numBags = 0;
  
  /** the string indices of the bag */
  protected StringLocator m_BagStringAtts;
  
  /** the total number of the propositional instance in the dataset */
  protected int m_numInstances;
  
  /** weight
  public static final int WEIGHTMETHOD_ORIGINAL = 0;
  public static final int WEIGHTMETHOD_1 = 1;
  public static final int WEIGHTMETHOD_INVERSE1 = 2;
  public static final int WEIGHTMETHOD_INVERSE2 = 3;
  public static final Tag[] TAGS_WEIGHTMETHOD = {
    new Tag(WEIGHTMETHOD_ORIGINAL, 
        "keep the weight to be the same as the original value"),
    new Tag(WEIGHTMETHOD_1, 
        "1.0"),
    new Tag(WEIGHTMETHOD_INVERSE1, 
        "1.0 / Total # of prop. instance in the corresp. bag"),
    new Tag(WEIGHTMETHOD_INVERSE2, 
        "Total # of prop. instance / (Total # of bags * Total # of prop. instance in the corresp. bag)")
  };

  /** the propositional instance weight setting method *
  protected int m_WeightMethod = WEIGHTMETHOD_INVERSE2;
  */

  /**
   * Returns an enumeration describing the available options
   *
   * @return an enumeration of all the available options
   */
  public Enumeration listOptions() {
    Vector result = new Vector();
  
    result.addElement(new Option(
          "\tThe type of weight setting for each prop. instance:\n"
          + "\t0.weight = original single bag weight /Total number of\n"
          + "\tprop. instance in the corresponding bag;\n"
          + "\t1.weight = 1.0;\n"
          + "\t2.weight = 1.0/Total number of prop. instance in the \n"
          + "\t\tcorresponding bag; \n"
          + "\t3. weight = Total number of prop. instance / (Total number \n"
          + "\t\tof bags * Total number of prop. instance in the \n"
          + "\t\tcorresponding bag). \n"
          + "\t(default:0)",
          "A", 1, "-A <num>"));
    
    return result.elements();
  }

  /**
   * Parses a given list of options. 
   *
   * @param options the list of options as an array of strings
   * @throws Exception if an option is not supported
   */
  public void setOptions(String[] options) throws Exception {
    
    /* weight  
     String weightString = Utils.getOption('A', options);
     if (weightString.length() != 0) {
     setWeightMethod(
     new SelectedTag(Integer.parseInt(weightString), TAGS_WEIGHTMETHOD));
     } else {
     setWeightMethod(
     new SelectedTag(WEIGHTMETHOD_INVERSE2, TAGS_WEIGHTMETHOD));
     }	*/
    
    // set multidmensional binning estimator and it options
    String [] estSpec = null;
    String estName = "weka.estimators.MultiTUBE";
    String estString = Utils.getOption('E', options);
    if (estString.length() != 0) {
      estSpec = Utils.splitOptions(estString);
      if (estSpec.length == 0) {
        throw new IllegalArgumentException("Invalid estimator specification string");
      }
      estName = estSpec[0];
      estSpec[0] = "";
      
      setEstimator((MultiEstimator) Utils.forName(MultiEstimator.class, estName, estSpec));
    }
  }
  
  /**
   * Gets the current settings of the classifier.
   *
   * @return an array of strings suitable for passing to setOptions
   */
  public String [] getOptions() {
    Vector        result;
    
    result = new Vector();
    
    /* weight
     * 
    result.add("-A");
    result.add("" + m_WeightMethod);
    */
 
    // estimator
    result.add("-E");
    result.add("" + getEstimatorSpec());
      
    // verbose settings
    String verboseLevels = getVerboseLevels();
    if (verboseLevels.length() > 0) {
      result.add("-V");
      result.add("" + verboseLevels);
      
    }

    return (String[]) result.toArray(new String[result.size()]);
  }

  /* weigth
   * Returns the tip text for this property
   *
   * @return tip text for this property suitable for
   * displaying in the explorer/experimenter gui
   *
  public String weightMethodTipText() {
    return "The method used for weighting the instances.";
  }

  /**
   * The new method for weighting the instances.
   *
   * @param method      the new method
   *
  public void setWeightMethod(SelectedTag method){
    if (method.getTags() == TAGS_WEIGHTMETHOD)
      m_WeightMethod = method.getSelectedTag().getID();
  }

  /**
   * Returns the current weighting method for instances.
   *
  public SelectedTag getWeightMethod(){
    return new SelectedTag(m_WeightMethod, TAGS_WEIGHTMETHOD);
  } */
  

  /** 
   * Returns the Capabilities of this filter.
   *
   * @return            the capabilities of this object
   * @see               Capabilities
   */
  public Capabilities getCapabilities() {
    Capabilities result = super.getCapabilities();

    // attributes
    result.disableAllAttributes();
    result.enable(Capability.NOMINAL_ATTRIBUTES);
    result.enable(Capability.RELATIONAL_ATTRIBUTES);
    //result.enable(Capability.MISSING_VALUES);
    
    // class
    result.enableAllClasses();
    //result.enable(Capability.MISSING_CLASS_VALUES);
    
    // other
    result.enable(Capability.ONLY_MULTIINSTANCE);
    
    return result;
  }

  /**
   * Returns the capabilities of this multi-instance filter for the
   * relational data (i.e., the bags).
   *
   * @return            the capabilities of this object
   * @see               Capabilities
   */
  public Capabilities getMultiInstanceCapabilities() {
    Capabilities result = new Capabilities(this);

    // attributes
    result.disableAllAttributes();
    result.enable(Capability.NUMERIC_ATTRIBUTES);
     
    // class
    result.enableAllClasses();
    //result.enable(Capability.MISSING_CLASS_VALUES);
    //result.enable(Capability.NO_CLASS);
    
    // other
    result.setMinimumNumberInstances(0);
    
    return result;
  }

  /**
   * Switches the outputs on that are requested from the option V
   * if list is empty switches on the verbose mode only
   * @param list list of integers, all are used for an output type
   */
  public void setVerboseLevels(String list) { 
    dbo.setOutputTypes(list);
  }
  
  /**
   * Gets the current output type selection
   *
   * @return a string containing a comma separated list of ranges
   */
  public String getVerboseLevels() {
    return dbo.getOutputTypes();
  }
  
  /**
   * Sets the estimator
   *
   * @param estimator the estimator with all options set.
   */
  public void setEstimator(MultiEstimator estimator) {
    
    m_estimator = estimator;
  }
  
  /**
   * Gets the estimator used.
   *
   * @return the estimator
   */
  public MultiEstimator getEstimator() {
    
    return m_estimator;
  }
  
  /**
   * Gets the estimator specification string.
   *
   * @return the estimator string.
   */
  protected String getEstimatorSpec() {
    
    MultiEstimator e = getEstimator();
    if (e == null) return "";
    if (e instanceof OptionHandler) {
      return e.getClass().getName() + " "
      + Utils.joinOptions(((OptionHandler) e).getOptions());
    }
    return e.getClass().getName();
  }
  
  /**
   * Returns a string describing this filter
   *
   * @return a description of the filter suitable for
   * displaying in the explorer/experimenter gui
   */
  public String globalInfo() {

    return "Converts the single instance dataset "
      + "so that the Nominalize, Standardize and other type of filters or transformation "
      + " can be applied to these data for the further preprocessing. ";
  }

  /**
   * Sets the format of the input instances.
   *
   * @param instanceInfo an Instances object containing the input 
   * instance structure (any instances contained in the object are 
   * ignored - only the structure is required).
   * @return true if the outputFormat may be collected immediately
   * @throws Exception if the input format can't be set 
   * successfully
   */
  public boolean setInputFormat(Instances instanceInfo) 
    throws Exception {

    if (instanceInfo.attribute(1).type()!=Attribute.RELATIONAL) {
      throw new Exception("Can only handle relational-valued attribute!");
    }  
    super.setInputFormat(instanceInfo);   

    m_numBags = instanceInfo.numInstances();
    m_numInstances = 0;
    return false;
  }

  /**
   * Input an instance for filtering. Filter requires all
   * training instances be read before producing output.
   *
   * @param instance the input instance
   * @return true if the filtered instance may now be
   * collected with output().
   * @throws IllegalStateException if no input format has been set.
   */
  public boolean input(Instance instance) {
    
    if (getInputFormat() == null) {
      throw new IllegalStateException("No input instance format defined");
    }
    if (m_NewBatch) {
      resetQueue();
      m_NewBatch = false;
    }

    //convertInstance(instance);
    bufferInput(instance);
    return false;
  }

  /**
   * Signify that this batch of input to the filter is finished. 
   * The filter requires all instances prior to filtering,
   * output() is now called to retrieve the filtered instances.
   *
   * @return true if there are instances pending output
   * @throws IllegalStateException if no input structure has been defined
   */
  public boolean batchFinished() {

    if (getInputFormat() == null) {
      throw new IllegalStateException("No input instance format defined");
    }

    Instances input = getInputFormat();
    String relationName = input.relationName();
    int numBags = input.numInstances();

    // Convert pending input instances to propositional,
    // convert the training dataset into single-instance dataset
    /* weight
    m_convertToProp.setWeightMethod(getWeightMethod());
    */
    try {
      input = convertToPropositional(input);
      
      //input.deleteAttributeAt(0); // remove the bag index attribute
      //DBO.pln(""+input);
    } catch (Exception ex) {
      ex.printStackTrace();
      System.out.println(ex.getMessage());
      throw new IllegalStateException("Error while transforming to propositional");          
    }
    //DBO.pln("\n"+input.classIndex());

    try {
      // make the bin tree
      ((MultiEstimator)m_estimator).addValues(input, input.classIndex(), -1);
    } catch (Exception ex) {
      ex.printStackTrace();
      System.out.println(ex.getMessage());
      throw new IllegalStateException("Error while making bins");          
    }
    
    //DBO.pln("\n"+input.classIndex());
    DBO.pln("estimator "+((MultiEstimator)m_estimator).toString());
    
    //  getbins
    m_bins = ((MultiBinningEstimator)m_estimator).getBins();
    
    // set the root
    m_root = ((MultiBinningEstimator)m_estimator).getTree(); 
    
    m_estimator = null;
    
    // set output structure
    Attribute classAttribute = (Attribute) input.classAttribute().copy();
    Instances format = makeOutputFormat(relationName, m_bins, classAttribute, numBags);
    format.setClassIndex(format.numAttributes() - 1);

    super.setOutputFormat(format);

    // convert and push
    input = convertToMIDensity(input, true);
     
      
      
    // Free memory
    flushInput();

    m_NewBatch = true;
    return (numPendingOutput() != 0);
  }
  
  /**
   * Coverts instances to Multi instance density instances,
   * this means one instance per bag
   * @param input the instances to convert
   * @return the converted instances
   * @exception if exception in the filter
   */
  private Instances convertToPropositional(Instances input) throws Exception{
    //convert the training dataset into single-instance dataset
    //m_convertToProp.setWeightMethod(getWeightMethod());
  
    Instances newInst = new Instances(input, 0);
     m_convertToProp.setInputFormat(input);
    newInst = Filter.useFilter(input, m_convertToProp);
    m_propositionalFormat = new Instances(newInst, 0);
    //DBO.pln("\n\n"+newInst);
    //DBO.pln("\n"+newInst.classIndex());
    return newInst;
  }
  
 /**
   * coverts instances to Multi instance density instance,
   * this means one instance per bag
   * @param input the instances to be converted
   * @param doThePush if the instances should be pushed on the outputqueue
   * @return
   */
  private Instances convertToMIDensity(Instances input, boolean doThePush) {
    //DBO.pln("instances "+ input);
    int bagIndex = 0;
    //m_Estimator.initializeIgnoreList(input);
    //m_Estimator.setIgnore(bagIndex);
    Instances newInsts = new Instances(outputFormatPeek(), 0);
    double weight = 1.0;
    // instances are ordered by bag
    // get first bag number
    int numInst = input.numInstances();
    int numBag = -1;
    int currNumBag = 0;
    double classValue = -1.0;
    int ii = 0;
    if (ii < numInst) {
      Instance inst = input.instance(ii);
      numBag = (int)inst.value(bagIndex);
      classValue = (int)inst.classValue();
    }
    while (ii < numInst) {
      //DBO.pln("instance "+ii+" class "+classValue);
      currNumBag = numBag;
      // empty bins
      MultiBinningUtils.emptyBins(m_bins);

      // fill instances of one bag into tree
      while (numBag == currNumBag){
        if (ii < numInst) {
          
          Instance inst = input.instance(ii);
          classValue = (int)inst.classValue();
          numBag = (int)inst.value(bagIndex);
          if (numBag == currNumBag) {
            try {
              MultiBinningUtils.addInstanceToTree(m_root, m_bins, inst, weight);
            } catch (Exception ex) {
              ex.printStackTrace();
              System.out.println(ex.getMessage());
              throw new IllegalStateException("Error will finding tree filling");          
            }
          }
          ii++;
        } else {
          currNumBag = -1;
        }
      }
      // make attributes for new instance
      
      double [] attr = MultiBinningUtils.getBinFilling(m_bins, classValue);
      Instance newInst = new Instance(0.0, attr);
      if (doThePush) push(newInst);
      // prepare beginning of next loop     
    }
    
    return newInsts;
  }
    
  /**
   * Make the outpur format
   * 
   * @param bins the bins that were found after binning
   * @param classAttribute the full class attribute
   * @param numBags number of bags will be the number of instances
   * @return
   */
  private Instances makeOutputFormat(String relationName, Vector bins, 
      Attribute classAttribute, int numBags) {
    /* create a new output format (propositional instance format) */
   
    FastVector attributes = new FastVector();
    Attribute attribute;
    
    int numBins = bins.size();
    for (int i = 0; i < numBins; i++) {
      MultiBin bin = (MultiBin) bins.elementAt(i);
      
      attribute = new Attribute("Bin-" + bin.rangesToString()); 
      attributes.addElement(attribute);
    }
    attributes.addElement(classAttribute);
    
    Instances format = new Instances(relationName, attributes, numBags);
    return format;
  }

  /**
   * Convert a single bag over. The converted instances is 
   * added to the leftEnd of the output queue.
   *
   * @param bag the bag to convert
   */
  private void convertInstance(Instance bag) {

    Instances data = new Instances(bag.dataset(), 0);
    data.add(bag);
    System.out.println("convertInstance "+data);
    
    try {
      data = convertToPropositional(data);
      // train.deleteAttributeAt(0); // remove the bag index attribute
    } catch (Exception ex) {
      ex.printStackTrace();
      System.out.println(ex.getMessage());
      throw new IllegalStateException("Error in convertInstance, while transforming to propositional");          
    }
    
    // coverts back to one instance and pushes
    data = convertToMIDensity(data, true);
   
   }

  /**
   * Main method for running this filter.
   *
   * @param args should contain arguments to the filter: 
   * use -h for help
   */
  public static void main(String[] args) {
    try {
      if (Utils.getFlag('b', args)) {
        Filter.batchFilterFile(new MultiInstanceToMIDensity(), args);
      } 
      else {
        Filter.filterFile(new MultiInstanceToMIDensity(), args);
      }
    } 
    catch (Exception ex) {
      ex.printStackTrace();
      System.out.println(ex.getMessage());
    }
  }
  
  /**
   * Returns the revision string.
   * 
   * @return		the revision
   */
  public String getRevision() {
    return RevisionUtils.extract("$Revision: 1.00 $");
  }

}

